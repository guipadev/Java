package co.guipadev.StreamAPIdropWhileYtakeWhile;

import java.lang.reflect.Array;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

/**
 üöÄ Java 9 : ¬°Mejoras en la API de transmisi√≥n! üöÄ

 Java 9 trajo una serie de potentes mejoras a la API de Stream, haciendo que el procesamiento de datos en Java
 sea a√∫n m√°s expresivo y eficiente.
 ¬°Exploremos algunas de las nuevas caracter√≠sticas que simplifican nuestro c√≥digo y lo hacen m√°s legible!

 1Ô∏è‚É£ Presentamos dropWhile y takeWhile:
 El nuevo m√©todo dropWhile nos permite omitir elementos en una secuencia mientras se cumple una determinada condici√≥n.
 Por otro lado, el m√©todo takeWhile nos permite recopilar elementos de la secuencia hasta que la condici√≥n sea verdadera.
 Estos nuevos m√©todos proporcionan soluciones elegantes para manejar datos basados en predicados espec√≠ficos.

 2Ô∏è‚É£ Manejo nulo simplificado con ofNullable:
 Todos conocemos las dificultades de manejar valores nulos en nuestros datos.
 Java 9 solucion√≥ este punto d√©bil con el m√©todo ofNullable en la API Stream.
 Este m√©todo nos permite crear una secuencia de un solo elemento si no es nulo, o un flujo vac√≠o si el valor es nulo,
 lo que nos ayuda a evitar esas molestas NullPointerExceptions.

 3Ô∏è‚É£ M√©todo de iteraci√≥n mejorado:
 El m√©todo de iteraci√≥n obtuvo un impulso con una sobrecarga que toma un predicado.
 Ahora, podemos usar esta nueva versi√≥n para detener la iteraci√≥n basada en una condici√≥n, lo que nos proporciona
 m√°s flexibilidad en nuestro procesamiento de datos.
 Estas mejoras de la API de Stream en Java 9 han llevado la programaci√≥n de estilo funcional al siguiente nivel.
 Nos permiten escribir c√≥digo m√°s conciso y expresivo, lo que lleva a una mejor legibilidad y mantenibilidad.
 */
public class App {

    public static void main(String[] args) {

        // dropWhile

        List<Integer> numbers = Arrays.asList(1,2,3,4,5,6,7,8,9,10);

        List<Integer> result = numbers.stream()
                .dropWhile(n -> n < 5)
                .collect(Collectors.toList());

        System.out.println(result); // [5, 6, 7, 8, 9, 10]

        // takeWhile

        List<Integer> numeros = Arrays.asList(1,2,3,4,5,6,7,8,9,10);

        List<Integer> resultado = numbers.stream()
                .takeWhile(n -> n < 5)
                .collect(Collectors.toList());

        System.out.println(resultado); // [1, 2, 3, 4]
    }
}
